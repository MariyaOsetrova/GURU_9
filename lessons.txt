https://github.com/qa-guru/knowledge-base/wiki/2.-Git.-GitHub.-%D0%9F%D0%BE%D0%B3%D1%80%D1%83%D0%B6%D0%B0%D0%B5%D0%BC%D1%81%D1%8F.
GitHub — один из самых крупных и популярных сервисов для хостинга IT-проектов и совместной работы над ними. GitHub построен на базе Git,
а значит поддерживает всего его функции. Кроме основных функций в GitHub есть и другие, добавленные разработчиками сервиса:
 контроль доступа к коду, базы знаний, управление задачами, интеграцию с другими сервисами, запросы на принятия изменений и другие.
Кроме GitHub есть и другие сервисы онлайн-хостинга репозиториев: GitLab и Bitbucket.

**Для инициализации репозитория необходимо в папке с проектом вызвать команду git init.
В этот момент система создаст скрытую папку .git и будет сохранять в ней служебные файлы. Если ее удалить,
то Git потеряет данные о репозитории и перестанет отслеживать изменения в проекте.

Важно: вызывать git init необходимо в папке с проектом.

**Для добавления изменений необходимо вызвать команду git add <название файла>.
В этом случае Git добавит в индекс файл в текущем его состоянии.
Если необходимо добавить не один файл, а все содержимое проекта, то следует вызвать git add .. Следует использовать внимательно и осторожно, иначе можно закоммитить много лишнего.

Важно: Индекс в Git — специальная промежуточная область, хранящая в себе изменения файлов на пути от рабочей папки до репозитория.

**Как удалить изменения
Если в индекс попало лишнее, то такие файлы можно удалить из индекса с помощью команды git rm --cached <название файла>.
Весь индекс сразу можно очистить с помощью git rm --cached .

**Как не забивать репозиторий мусором
Во время работы над проектом IDE, компиляторы и другие инструменты создают много служебных файлов, которые не несут
в себе практической пользы для разработчика. Их не надо коммитить в репозиторий и чтобы в ручную не отслеживать их состояние, можно указать список этих файлов в .gitignore-файле.
 Такой файл можно написать самостоятельно, а можно сгенерировать на сайте.

 **Как контролировать статус файлов
 Для контроля статуса всех файлов проекта можно восопользоваться командой git status. Система выведет список файлов в индексе, неотслеживаемых файлов и удаленных из индекса.

** Как зафиксировать измения в репозитории
 В локальном репозитории изменения можно зафиксировать с помощью команды git commit -m "Ваше сообщение". После вызова все файлы из индекса попадут в локальный репозиторий. Поэтому перед вызовом git commit необходимо выполнить git add. Также в строчке сообщений важно указывать осмысленные сообщения о внесенных изменениях.

 **Как подключить удаленный репозиторий GitHub
 Сперва необходимо создать сам проект, проинициализировать в нем локальный репозиторий с помощью git init (смотри выше) и создать репозиторий на GitHub (смотри выше).

 После создания пустого репозитория в GitHub на его странице увидим следующую инструкцию:
 Как контролировать статус файлов
 Для контроля статуса всех файлов проекта можно восопользоваться командой git status. Система выведет список файлов в индексе, неотслеживаемых файлов и удаленных из индекса.

 **Как зафиксировать измения в репозитории
 В локальном репозитории изменения можно зафиксировать с помощью команды git commit -m "Ваше сообщение". После вызова все файлы из индекса попадут в локальный репозиторий. Поэтому перед вызовом git commit необходимо выполнить git add. Также в строчке сообщений важно указывать осмысленные сообщения о внесенных изменениях.

 **Как подключить удаленный репозиторий GitHub
 Сперва необходимо создать сам проект, проинициализировать в нем локальный репозиторий с помощью git init (смотри выше) и создать репозиторий на GitHub (смотри выше).

 После создания пустого репозитория в GitHub на его странице увидим следующую инструкцию:

** Как отправлять изменения в удаленный репозиторий GitHub
 Для отправки изменения в удаленный репозиторий GitHub предусмотрена команда push. Если мы делаем первый пуш, то необходимо вызвать команду в следующем виде и обязательно с ключом -u: git push -u origin <название ветки>. Далее просто git push origin <название ветки>.


 **Основные команды:

 Создать новую ветку — git branch <имя ветки>
 Посмотреть список веток — git branch
 Переключиться на ветку — git checkout <имя ветки>